---
- hosts: all
  gather_facts: false

  tasks:
  - name: Install python (for ansible itself)
    raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
    become: true

  # 1. Create an "app" user and group which will have permissions necessary to
  # run the app
  - name: Create app group
    group:
      name: app
    become: true

  - name: Create user 'app'
    user:
      name: app
      group: app
      comment: "CaseCompanion Application"
    become: true

  # 2. Create a "tdooner" user with my SSH key
  - name: Create user 'tdooner'
    user:
      name: tdooner
      groups: app
      append: true
    become: true

# 3. Install rbenv, ruby
- hosts: all
  gather_facts: true
  vars:
    rbenv:
      env: user
      version: 'v1.1.1'
      default_ruby: 2.4.0
      rubies:
        - version: 2.4.0

  roles:
    - role: zzet.rbenv
      rbenv_extra_depends:
        - ca-certificates
        - curl
      rbenv_users:
        - app

# 4. Install packages that are application dependencies
- hosts: all
  gather_facts: false
  tasks:
    - name: Install application dependencies
      apt:
        name: "{{ item }}"
      with_items:
        - postgresql-9.5 # TODO: Use RDS or a different instance?
        - libpq-dev
        - libsqlite3-dev
        - nodejs # a javascript runtime is required for uglifier
        - rsync # for copying
      become: true

    # 5. Create a systemd unit file for the application with an EnvironmentFile
    # set with the desired configuration. Enable the service to start on boot.
    # TODO: Add the EnvironmentFile
    - name: Install systemd template
      template:
        src: ./templates/casecompanion.service.j2
        dest: /etc/systemd/system/casecompanion.service
      become: true

    - name: Enable systemd service on boot
      file:
        src: /etc/systemd/system/casecompanion.service
        dest: /etc/systemd/system/multi-user.target.wants/casecompanion.service
        state: link
      become: true

# 6. Add application code
- hosts: all
  user: app
  gather_facts: false
  vars:
    user: app
    # TODO: Parameterize these:
    home_directory: '/home/{{ user }}'
    deploy_to: '{{ home_directory }}'
    gem_home: '/home/app/.rbenv/versions/2.4.0'
    rails_bin_paths:
      - "/home/app/.rbenv/shims"
  roles:
    - role: nicolai86.prepare-release
      repo: https://github.com/multnomah-fellowship/casecompanion.git
      branch: master
      symlinks:
        - { src: '{{ shared_path }}/vendor/bundle', dest: '{{ build_path }}/vendor/bundle' }
        # - { src: '{{ shared_path }}/log', dest: '{{ build_path }}/log' } # TODO: log
        - { src: '{{ shared_path }}/.env', dest: '{{ build_path }}/.env' }
        - { src: '{{ shared_path }}/config/database.yml', dest: '{{ build_path }}/config/database.yml' }
        # TODO: Puma config too
      directories:
        - '{{ shared_path }}/config'
        - '{{ shared_path }}/log'
        - '{{ shared_path }}/public'
      tags: deploy
    - role: nicolai86.rails-deployment
      migrate: yes # TODO: this should be "no" when Postgres is no longer on the box
      compile_assets: yes
      force_migrate: no
      force_asset_compilation: no
      tags: deploy
    - role: nicolai86.finalize-release
      tags: deploy
    # 6. Add application code
    # - name: Copy application code
    #   synchronize:
    #     src: ../../../
    #     dest: /home/app/src
    #     rsync_opts:
    #       - "--exclude=.git"
    #   become: true
    #   become_user: app

# 7. Install and configure nginx
- hosts: all
  gather_facts: true
  roles:
    - role: jdauphant.nginx
      nginx_sites:
        casecompanion:
          template: ./templates/casecompanion.conf.j2

# 8. Figure out logging / log rotation. Maybe just use systemd.
